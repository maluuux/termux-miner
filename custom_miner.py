#!/usr/bin/env python3
import subprocess
import re
import json
import sys
import os
from time import sleep

# ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
def load_config():
    try:
        with open('config.json') as f:
            return json.load(f)
    except FileNotFoundError:
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå config.json ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")
        return {
            "algorithm": "verus",
            "pool": "stratum+tcp://pool.url:port",
            "wallet": "YOUR_WALLET_ADDRESS",
            "password": "x"
        }

# ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
def format_output(line):
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö hashrate
    hashrate_match = re.search(r'(\d+\.\d+)\s*(kH|MH|GH)/s', line)
    if hashrate_match:
        speed, unit = hashrate_match.groups()
        units = {"kH": "‡∏Å‡∏¥‡πÇ‡∏•", "MH": "‡πÄ‡∏°‡∏Å‡∏∞", "GH": "‡∏Å‡∏¥‡∏Å‡∏∞"}
        return f"‚ö° ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß: {speed} {units.get(unit, unit)}‡∏Æ‡∏≤‡∏ä/‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‚ö°"
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏∏‡∏î
    if 'accepted' in line:
        return f"‚úÖ {line.strip()}"
    elif 'rejected' in line:
        return f"‚ùå {line.strip()}"
    
    return line.strip()

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
def main():
    config = load_config()
    
    cmd = [
        './ccminer',
        '-a', config['algorithm'],
        '-o', config['pool'],
        '-u', config['wallet'],
        '-p', config['password']
    ]
    
    print(f"üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏∏‡∏î‡∏î‡πâ‡∏ß‡∏¢‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏°: {config['algorithm']}")
    print(f"üîó Pool: {config['pool']}")
    print("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
    
    process = subprocess.Popen(
        cmd,
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        universal_newlines=True
    )
    
    while True:
        output = process.stdout.readline()
        if not output and process.poll() is not None:
            break
        if output:
            print(format_output(output))
        sleep(0.1)

if __name__ == "__main__":
    main()
